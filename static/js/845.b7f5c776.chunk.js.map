{"version":3,"file":"static/js/845.b7f5c776.chunk.js","mappings":"0OAiCA,UA5Ba,WACT,OAAkDA,EAAAA,EAAAA,UAAS,IAA3D,eAAOC,EAAP,KAA0BC,EAA1B,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACND,GAAW,GACXE,GACH,GAAE,IAEH,IAAMA,EAAmB,mCAAG,8GAEDC,EAAAA,EAAAA,MAFC,OAEdC,EAFc,OAGpBN,EAAqBM,EAAKA,KAAKC,SAC/BL,GAAW,GAJS,gDAMpBM,QAAQC,IAAR,MANoB,iEAAH,qDAUzB,OACI,iCACI,wBAAI,mBACHR,IAAW,SAAC,IAAD,IACXF,IAAqB,SAAC,IAAD,CAAWW,KAAMX,MAGlD,C,gFC7BYY,E,QAAMC,EAAAA,IAAH,mL,SCmBhB,EAlBgB,WACZ,OACI,SAACD,EAAD,WACG,SAAC,KAAD,CACXE,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAKR,C,8GCfYC,GAAYT,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAH,+CAgBTW,GAVYX,EAAAA,EAAAA,IAAH,uOAUJA,EAAAA,EAAAA,GAAH,6SAaFY,EAAMZ,EAAAA,EAAAA,IAAH,sEAMHa,EAAab,EAAAA,EAAAA,IAAH,4HAQVc,EAAOd,EAAAA,EAAAA,KAAH,gL,SC1BjB,EAjBkB,SAAC,GAAwB,IAAtBF,EAAqB,EAArBA,KAAMiB,EAAe,EAAfA,SAEvB,OACI,0BACI,SAACJ,EAAD,UACKb,EAAKkB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAMC,EAAb,EAAaA,YAAb,OACN,yBACI,UAACV,EAAD,CAAWW,GAAE,kBAAaH,GAAMI,MAAO,CAACC,KAAKP,GAA7C,UACKI,GAAc,SAACP,EAAD,CAAKW,IAAG,UAAKC,EAAAA,IAAL,OAA2BL,GAAeM,IAAI,MAAQ,SAACZ,EAAD,WAAY,SAACC,EAAD,UAAOI,OAChG,0BAAOA,QAHND,EADH,OAWzB,C,2NCjBKS,G,QAAW,gCACXC,EAAU,mCACVC,EAAiB,mBACjBC,EAAoB,gBACpBC,EAAY,eACJN,EAAsB,mCAG7B,SAAe/B,IAAtB,4CAAO,OAAP,oBAAO,oFACiB,MADjB,SAEcsC,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAAwBE,GAAxB,OADG,MACH,oBAAgED,IAF9E,0GAMA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAA8BC,GAA9B,uEACU,UADV,SAEcF,EAAAA,EAAAA,IAAA,UAAaL,GAAb,OAAwBG,EAAxB,oBAAqDF,EAArD,kBAAsEM,EAAtE,+BAAkGH,GAAlG,OADJ,YADV,0GAMA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAyBjB,GAAzB,iFACcc,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA+BT,EAA/B,oBAA6CU,GAA7C,OAAuDG,IADrE,0GAMA,SAAeK,EAAtB,kC,aAAO,O,oBAAA,WAA2BlB,GAA3B,iFACcc,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA+BT,EAA/B,4BAAqDU,GAArD,OAA+DG,IAD7E,0GAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA8BnB,GAA9B,iFACcc,EAAAA,EAAAA,IAAA,UAAaL,EAAb,kBAA+BT,EAA/B,4BAAqDU,GAArD,OAA+DG,IAD7E,0G","sources":["Pages/Home.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","components/Services/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport Loader from \"components/Loader/Loader\";\nimport { FetchPopularMovies } from 'components/Services/Api';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst Home = () => {\n    const [trandingMovieList, setTrandingMovieList] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        setLoading(true);\n        FecthPopularContent();\n    }, []);\n    \n    const FecthPopularContent = async () => {\n        try {\n            const data = await FetchPopularMovies();\n            setTrandingMovieList(data.data.results);\n            setLoading(false);\n        } catch (error) {\n            console.log(error);\n        };\n    };\n\n    return (\n        <>\n            <h1>Trending today</h1>\n            {loading && <Loader />}\n            {trandingMovieList && <MovieList List={trandingMovieList}  />}\n        </>\n    );\n};\n\nexport default Home;","import styled from '@emotion/styled';\n\nexport const Div = styled.div`\n\n\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: flex-start;\n   \n`;","import { ThreeDots } from 'react-loader-spinner';\nimport { Div } from './Loader.styled';\n\nconst  Loader = () => {\n    return (\n        <Div>\n           <ThreeDots \nheight=\"80\" \nwidth=\"80\" \nradius=\"9\"\ncolor=\"#4fa94d\" \nariaLabel=\"three-dots-loading\"\nwrapperStyle={{}}\nwrapperClassName=\"\"\nvisible={true}\n />\n\n        </Div>\n    )\n}\n\nexport default Loader","import styled from '@emotion/styled';\nimport { Link } from \"react-router-dom\";\n\n\nexport const LinkStile = styled(Link)`\ntext-decoration:none;\n`;\n\n\n\nexport const Container = styled.div`\ndisplay:flex;\n\nbox-shadow: 0 1px 4px rgba(0, 0, 0, .3),\n            -23px 0 20px -23px rgba(0, 0, 0, .6),\n            23px 0 20px -23px rgba(0, 0, 0, .6),\n            inset 0 0 40px rgba(0, 0, 0, .1);\n`;\n\n\nexport const Ul = styled.ul`\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 16px;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const Img = styled.img`\ndisplay:block;\nwidth:220px;\nheight: 330px;\n`;\n\nexport const DivWrapper = styled.div`\ndisplay:inline-block;\nposition: relative;\nwidth:220px;\nheight:330px;\nbackground-color:#B0C4DE;\n`;\n\nexport const Span = styled.span`\ndispaly: block;\nposition: absolute;\ntop:50%;\nleft:50%;\n transform: translate(-50%, -50%);\n font-family: serif;\n font-size:24px;\n\n color:white;\n`;\n","import PropTypes from 'prop-types';\nimport { firstPeaceOfImgTrip } from 'components/Services/Api';\nimport {Ul, Img, LinkStile,DivWrapper, Span} from './MovieList.styled'\n\nconst MovieList = ({ List, location }) => {\n\n    return (\n        <div>\n            <Ul>\n                {List.map(({ id, title,poster_path }) => (\n                    <li key={id}>\n                        <LinkStile to={`/movies/${id}`} state={{from:location}} >\n                            {poster_path ? <Img src={`${firstPeaceOfImgTrip}${poster_path}`} alt='' /> : <DivWrapper><Span>{title }</Span></DivWrapper>}\n                            <span>{title}</span>\n                        </LinkStile>\n                    </li>\n                ))}\n            </Ul>\n        </div>\n    )\n};\nexport default MovieList;\n\nMovieList.propTypes = {\n    List: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n        poster_path: PropTypes.string\n    }))\n};\n","import axios from \"axios\";\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst BASE_URL = 'https://api.themoviedb.org/3'; \nconst API_KEY = 'db1df0c9565c427084a8440ce91f6639';\nconst TRENDING_MOVIE = '/trending/movie/';\nconst SEARCH_BY_KEYWORD = '/search/movie';\nconst languages = '&language=en';\n export const firstPeaceOfImgTrip = 'https://image.tmdb.org/t/p/w500/';\n\n//example https://api.themoviedb.org/3/trending/movie/day?api_key=db1df0c9565c427084a8440ce91f6639\nexport async function FetchPopularMovies() {\n    const time_window = 'day'; // or week\n        return await axios.get(`${BASE_URL}${TRENDING_MOVIE}${time_window}?api_key=${API_KEY}`); \n};\n\n//example 'https://api.themoviedb.org/3/search/movie?query=car&include_adult=false&language=${}&page=1'\nexport async function FetchByKeyword(query) { \n    const page = '&page=1';\n        return await axios.get(`${BASE_URL}${SEARCH_BY_KEYWORD}?api_key=${API_KEY}&query=${query}&include_adult=false${languages}${page}`)  \n} \n\n//example 'https://api.themoviedb.org/3/movie/100287?language=en-US&api_key=db1df0c9565c427084a8440ce91f6639'\nexport async function FetchById(id) {\n        return await axios.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}${languages}`);  \n}\n    \n//'https://api.themoviedb.org/3/movie/569094/credits?language=en-US'\n\nexport async function FetchByCast(id) {\n        return await axios.get(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}${languages}`); \n}\n\n//example https://api.themoviedb.org/3/movie/1765227/reviews?language=en-US&page=1\nexport async function FetchByReviews(id) {\n        return await axios.get(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}${languages}`); \n}\n\n\n"],"names":["useState","trandingMovieList","setTrandingMovieList","loading","setLoading","useEffect","FecthPopularContent","FetchPopularMovies","data","results","console","log","List","Div","styled","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","LinkStile","Link","Ul","Img","DivWrapper","Span","location","map","id","title","poster_path","to","state","from","src","firstPeaceOfImgTrip","alt","BASE_URL","API_KEY","TRENDING_MOVIE","SEARCH_BY_KEYWORD","languages","axios","FetchByKeyword","query","FetchById","FetchByCast","FetchByReviews"],"sourceRoot":""}